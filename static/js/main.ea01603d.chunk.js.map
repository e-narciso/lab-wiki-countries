{"version":3,"sources":["Components/Navbar.jsx","Components/CountriesList.jsx","Components/CountryDetails.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","CountriesList","mappedCountries","props","countries","map","each","i","key","cca3","activeClassName","flag","name","common","this","Component","CountryDetails","x","getCountry","find","oneCountry","params","match","foundCountry","borders","length","country","official","capital","area","App","state","allCountries","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qnpeAeeA,EAZA,WACb,OACE,yBAAKC,UAAU,sCACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBAAvB,oBCsBOE,E,2MAzBbC,gBAAkB,WAEhB,OAAO,EAAKC,MAAMC,UAAUC,KAAI,SAACC,EAAMC,GACrC,OACE,kBAAC,IAAD,CACEC,IAAKD,EACLP,GAAE,WAAMM,EAAKG,MACbV,UANY,mDAOZW,gBAAgB,UAEfJ,EAAKK,KANR,IAMeL,EAAKM,KAAKC,Y,wEAO7B,OACE,yBAAKd,UAAU,0BACb,yBAAKA,UAAU,cAAce,KAAKZ,wB,GApBda,aC4DbC,EA3DQ,SAAAb,GACrB,IAUmBc,EAVbC,EAAa,SAAAT,GAIjB,OAAOL,EAAUe,MAHE,SAAAC,GACjB,OAAOA,EAAWX,OAASA,MAKvBY,EAAWlB,EAAMmB,MAAjBD,OACFE,EAAeL,EAAWG,EAAOZ,MAgBjCe,EAba,KADAP,EAcQM,EAAaC,SAbhCC,OACG,oCAEAR,EAAEZ,KAAI,SAACC,EAAMC,GAClB,IAAMmB,EAAUR,EAAWZ,GAC3B,OACE,wBAAIE,IAAKD,GACP,kBAAC,IAAD,CAAMP,GAAE,WAAMM,IAASoB,EAAQd,KAAKC,YAS9C,OACE,yBAAKd,UAAU,sBACb,4BAAKwB,EAAaX,KAAKC,QACvB,4BAAI,4BAAKU,EAAaX,KAAKe,WAC3B,2BAAO5B,UAAU,SACf,gCACA,+BACE,4BACE,wBAAIA,UAAU,WAAd,WACA,4BAAKwB,EAAaK,UAEpB,4BACE,oCACA,4BACGL,EAAaM,KADhB,MAEE,oCAGJ,4BACE,uCACA,4BACE,4BAAKL,S,OCVJM,E,2MAjCbC,MAAQ,CACNC,aAAc5B,G,wEAYd,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAeK,UAAWU,KAAKiB,MAAMC,eACrC,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,SACLC,UAAW,SAAChC,GAAD,OACT,kBAAC,EAAmBA,a,GAxBlBY,aCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCTNkB,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea01603d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-primary mb-3\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand\">\n          WikiCountries\n        </Link>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass CountriesList extends Component {\n  mappedCountries = () => {\n    const classList = \"list-group-item list-group-item-action text-left\";\n    return this.props.countries.map((each, i) => {\n      return (\n        <NavLink\n          key={i}\n          to={`/${each.cca3}`}\n          className={classList}\n          activeClassName=\"active\"\n        >\n          {each.flag} {each.name.common}\n        </NavLink>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"col-5 countries-column\">\n        <div className=\"list-group\">{this.mappedCountries()}</div>\n      </div>\n    );\n  }\n}\n\nexport default CountriesList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport countries from \"../countries.json\"\n\nconst CountryDetails = props => {\n  const getCountry = cca3 => {\n    const theCountry = oneCountry => {\n      return oneCountry.cca3 === cca3;\n    };\n    return countries.find(theCountry);\n  };\n\n  const { params } = props.match;\n  const foundCountry = getCountry(params.cca3);\n\n  const getBorders = x => {\n    if (x.length === 0) {\n      return <li>None</li>;\n    } else\n      return x.map((each, i) => {\n        const country = getCountry(each);\n        return (\n          <li key={i}>\n            <Link to={`/${each}`}>{country.name.common}</Link>\n          </li>\n        );\n      });\n  };\n\n  const borders = getBorders(foundCountry.borders);\n  // console.log(foundCountry);\n\n  return (\n    <div className=\"col-7 text-justify\">\n      <h1>{foundCountry.name.common}</h1>\n      <h6><em>{foundCountry.name.official}</em></h6>\n      <table className=\"table\">\n        <thead></thead>\n        <tbody>\n          <tr>\n            <td className=\"capital\">Capital</td>\n            <td>{foundCountry.capital}</td>\n          </tr>\n          <tr>\n            <td>Area</td>\n            <td>\n              {foundCountry.area} km\n              <sup>2</sup>\n            </td>\n          </tr>\n          <tr>\n            <td>Borders</td>\n            <td>\n              <ul>{borders}</ul>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n  // }\n};\n\nexport default CountryDetails;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport countries from \"./countries.json\";\nimport Navbar from \"./Components/Navbar\";\nimport CountriesList from \"./Components/CountriesList\";\nimport CountryDetails from \"./Components/CountryDetails\";\nimport { Route } from \"react-router-dom\";\n// import axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    allCountries: countries,\n  };\n\n  // componentDidMount() {\n  //   axios.get(\"https://countries.tech-savvy.tech/countries\").then(response => {\n  //     console.log(response.data);\n  //     this.setState({ allCountries: response.data });\n  //   });\n  // }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <CountriesList countries={this.state.allCountries} />\n            <Route\n              exact\n              path=\"/:cca3\"\n              component={(props) => (\n                <CountryDetails {...props} />\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}